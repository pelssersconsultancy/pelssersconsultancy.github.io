{"meta":{"title":"Pelssers Consultancy","subtitle":null,"description":null,"author":"Robby Pelssers","url":"http://pelssersconsultancy.github.io"},"pages":[{"title":"about","date":"2016-04-25T12:17:06.000Z","updated":"2016-04-25T12:29:02.000Z","comments":false,"path":"about/index.html","permalink":"http://pelssersconsultancy.github.io/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2016-04-25T12:30:27.000Z","updated":"2016-04-25T12:34:21.000Z","comments":false,"path":"tags/index.html","permalink":"http://pelssersconsultancy.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2016-04-25T12:07:40.000Z","updated":"2016-04-25T12:34:51.000Z","comments":false,"path":"categories/index.html","permalink":"http://pelssersconsultancy.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Finding project in workspace with specific maven dependency","slug":"Finding-project-in-workspace-with-specific-maven-dependency","date":"2016-07-18T18:12:48.000Z","updated":"2016-07-18T18:37:14.000Z","comments":true,"path":"2016/07/18/Finding-project-in-workspace-with-specific-maven-dependency/","link":"","permalink":"http://pelssersconsultancy.github.io/2016/07/18/Finding-project-in-workspace-with-specific-maven-dependency/","excerpt":"","text":"1. ContextYou have several projects in your workspace and you were wondering which projects are depending on a specific version of a maven dependency. This article will show you how to solve this from the command line. 2. Generating Maven TreeTo print the dependency tree of a Maven pom, you can run the following command: 1$ mvn dependency:tree Output for e.g. javaslang submodule would be 1234567891011121314151617181920robbypelssers1@Macbook-Robby-Pelssers:~/Documents/pelssers/javaslang/javaslang$ mvn dependency:tree[INFO] Scanning for projects...[INFO][INFO] ------------------------------------------------------------------------[INFO] Building Javaslang 3.0.0-SNAPSHOT[INFO] ------------------------------------------------------------------------[INFO][INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ javaslang ---[INFO] io.javaslang:javaslang:jar:3.0.0-SNAPSHOT[INFO] +- io.javaslang:javaslang-match:jar:3.0.0-SNAPSHOT:compile[INFO] +- junit:junit:jar:4.12:test[INFO] | \\- org.hamcrest:hamcrest-core:jar:1.3:test[INFO] \\- org.assertj:assertj-core:jar:3.3.0:test[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 0.745s[INFO] Finished at: Mon Jul 18 20:10:16 CEST 2016[INFO] Final Memory: 17M/309M[INFO] ------------------------------------------------------------------------ 3. Filtering on the line with specific maven dependency for e.g. hamcrest-core version 1.312robbypelssers1@Macbook-Robby-Pelssers:~/Documents/pelssers/javaslang/javaslang$ mvn dependency:tree | grep org.hamcrest:hamcrest-core:jar:1.3[INFO] | \\- org.hamcrest:hamcrest-core:jar:1.3:test 4. Finding all pom files in workspace or specific project123456789robbypelssers1@Macbook-Robby-Pelssers:~/Documents/pelssers/javaslang$ find . -name pom.xml./javaslang/pom.xml./javaslang-benchmark/pom.xml./javaslang-gwt/example/pom.xml./javaslang-gwt/pom.xml./javaslang-match/pom.xml./javaslang-pure/pom.xml./javaslang-test/pom.xml./pom.xml 5. Pipe the search results (pom files) as input for generating dependeny treeIdeally we want to pipe all pom’s as input for generating the maven dependency tree and next filter on the specific dependency. The problem is you will ony output something like 1[INFO] | \\- org.hamcrest:hamcrest-core:jar:1.3:test So we still don’t now what file lead to this output printed to the shell. We can however use following little trick. We basically first find all pom files, next we first make sure to print which one we are processing. Next we execute inside the folder of the respective pom the maven dependency tree command. Now we need to make sure we both grep for lines containing ‘Processing’ AND also lines containing our maven dependency. 1javaslang$ find . -name pom.xml -exec echo &apos;Processing &#123;&#125;&apos; \\; -execdir mvn -f &#123;&#125; dependency:tree \\; | grep &quot;org.hamcrest:hamcrest-core:jar:1.3\\|Processing&quot; This will result in below output: 123456789101112131415161718Processing ./javaslang/pom.xml[INFO] | \\- org.hamcrest:hamcrest-core:jar:1.3:testProcessing ./javaslang-benchmark/pom.xml[INFO] | \\- org.hamcrest:hamcrest-core:jar:1.3:testProcessing ./javaslang-gwt/example/pom.xmlProcessing ./javaslang-gwt/pom.xmlProcessing ./javaslang-match/pom.xml[INFO] | \\- org.hamcrest:hamcrest-core:jar:1.3:testProcessing ./javaslang-pure/pom.xml[INFO] | \\- org.hamcrest:hamcrest-core:jar:1.3:testProcessing ./javaslang-test/pom.xml[INFO] | \\- org.hamcrest:hamcrest-core:jar:1.3:testProcessing ./pom.xml[INFO] | \\- org.hamcrest:hamcrest-core:jar:1.3:test[INFO] | \\- org.hamcrest:hamcrest-core:jar:1.3:test[INFO] | \\- org.hamcrest:hamcrest-core:jar:1.3:test[INFO] | \\- org.hamcrest:hamcrest-core:jar:1.3:test[INFO] | \\- org.hamcrest:hamcrest-core:jar:1.3:test","categories":[],"tags":[{"name":"Maven","slug":"Maven","permalink":"http://pelssersconsultancy.github.io/tags/Maven/"},{"name":"Shell","slug":"Shell","permalink":"http://pelssersconsultancy.github.io/tags/Shell/"}]},{"title":"How to use different SSH keys for different Github accounts","slug":"How-to-use-different-SSH-keys-for-different-Github-accounts","date":"2016-05-13T07:48:18.000Z","updated":"2016-05-13T08:04:24.000Z","comments":true,"path":"2016/05/13/How-to-use-different-SSH-keys-for-different-Github-accounts/","link":"","permalink":"http://pelssersconsultancy.github.io/2016/05/13/How-to-use-different-SSH-keys-for-different-Github-accounts/","excerpt":"","text":"1. ContextAs self-employed developer I have two github accounts: 1 account for personal use robbypelssers 1 account for my company pelssersconsultancy So I would like to use a different ssh key to authenticate with per account. The default ssh key is coupled to robbypelssers and I created a second ssh key for pelssersconsultancy. 123robbypelssers1@Macbook-Robby-Pelssers:~/.ssh$ ls -la *pelssersconsultancy*-rw------- 1 robbypelssers1 staff 3243 Apr 23 11:39 id_pelssersconsultancy_rsa-rw-r--r-- 1 robbypelssers1 staff 757 Apr 23 11:39 id_pelssersconsultancy_rsa.pub In order to always couple the my private .ssh key ‘id_pelssersconsultancy_rsa’ toany repository from pelssersconsultancy I added the following entry to .ssh/config 12345robbypelssers1@Macbook-Robby-Pelssers:~/.ssh$ more configHost github.com-pelssersconsultancy HostName github.com User git IdentityFile ~/.ssh/id_pelssersconsultancy_rsa So in order to checkout the project mytodolist normally I would do 1$ git clone git@github.com:pelssersconsultancy/mytodolist.git but instead now I can do 1$ git clone git@github.com-pelssersconsultancy:pelssersconsultancy/mytodolist.git Just to verify: 1234$ git remote show origin remote origin Fetch URL: git@github.com-pelssersconsultancy:pelssersconsultancy/mytodolist.git Push URL: git@github.com-pelssersconsultancy:pelssersconsultancy/mytodolist.git","categories":[],"tags":[{"name":"Github","slug":"Github","permalink":"http://pelssersconsultancy.github.io/tags/Github/"},{"name":"SSH","slug":"SSH","permalink":"http://pelssersconsultancy.github.io/tags/SSH/"}]},{"title":"Using MapReduce with Morphia and MongoDB","slug":"Using-MapReduce-with-Morphia-and-MongoDB","date":"2016-05-10T12:43:33.000Z","updated":"2016-05-10T14:59:47.000Z","comments":true,"path":"2016/05/10/Using-MapReduce-with-Morphia-and-MongoDB/","link":"","permalink":"http://pelssersconsultancy.github.io/2016/05/10/Using-MapReduce-with-Morphia-and-MongoDB/","excerpt":"","text":"1. PreconditionYou have a database called HELLOWORLD with 1 collection called Person containing following documents: 1234567891011121314151617181920212223242526272829303132333435363738[&#123; \"firstName\": \"John\", \"lastName\": \"Doe\", \"age\": 35, \"location\": &#123; \"country\": \"NL\", \"city\": \"Maastricht\" &#125;&#125;,&#123; \"firstName\": \"Mark\", \"lastName\": \"Doe\", \"age\": 45, \"location\": &#123; \"country\": \"NL\", \"city\": \"Eindhoven\" &#125;&#125;,&#123; \"firstName\": \"Pieter\", \"lastName\": \"Nelissen\", \"age\": 55, \"location\": &#123; \"country\": \"NL\", \"city\": \"Amsterdam\" &#125;&#125;,&#123; \"firstName\": \"Edgard\", \"lastName\": \"Lejeune\", \"age\": 25, \"location\": &#123; \"country\": \"FR\", \"city\": \"Paris\" &#125;&#125;] 2. Find number of persons per city for country NL12345678910111213robbypelssers1@macbookpelssers:~$ mongoMongoDB shell version: 3.2.3connecting to: test&gt; use HELLOWORLDswitched to db HELLOWORLD&gt;var mapFunc = function() &#123; emit(this.location.city, this.age); &#125;;var reduceFunc = function(k, v) &#123; return Array.sum(v); &#125;;db.Person.mapReduce(mapFunc,reduceFunc, &#123;out: &#123; inline: 1 &#125;, query: &#123;&quot;location.country&quot;: &quot;NL&quot;&#125;&#125;) 3. Output from shell123456789101112131415161718192021222324&#123; \"results\" : [ &#123; \"_id\" : \"Amsterdam\", \"value\" : 55 &#125;, &#123; \"_id\" : \"Eindhoven\", \"value\" : 45 &#125;, &#123; \"_id\" : \"Maastricht\", \"value\" : 35 &#125; ], \"timeMillis\" : 13, \"counts\" : &#123; \"input\" : 3, \"emit\" : 3, \"reduce\" : 0, \"output\" : 3 &#125;, \"ok\" : 1&#125; 4. How to do it in Java using Morphia and MongoDB Java driver12345678910111213141516Datastore datastore = ... DBCollection collection = datastore.getCollection(Person.class);DBObject query = new BasicDBObject(\"location.country\", \"NL\");String mapFunc = \"function() &#123; emit(this.location.city, this.age); &#125;\";String reduceFunc = \"function(k, v) &#123; return Array.sum(v); &#125;\";MapReduceCommand mapReduceCommand = new MapReduceCommand(collection, mapFunc, reduceFunc, null, MapReduceCommand.OutputType.INLINE, query);MapReduceOutput output = collection.mapReduce(mapReduceCommand); output.results().forEach(result -&gt; &#123; DBObject key = (DBObject) result.get(\"_id\"); Double value = (Double) result.get(\"value\"); //do something with this data....&#125;);","categories":[],"tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"http://pelssersconsultancy.github.io/tags/MongoDB/"},{"name":"Morphia","slug":"Morphia","permalink":"http://pelssersconsultancy.github.io/tags/Morphia/"},{"name":"MapReduce","slug":"MapReduce","permalink":"http://pelssersconsultancy.github.io/tags/MapReduce/"}]},{"title":"How fast are your collections?","slug":"How-fast-are-your-collections","date":"2016-04-25T18:03:28.000Z","updated":"2016-04-25T18:07:35.000Z","comments":true,"path":"2016/04/25/How-fast-are-your-collections/","link":"","permalink":"http://pelssersconsultancy.github.io/2016/04/25/How-fast-are-your-collections/","excerpt":"","text":"JRebel Collections cheat sheet","categories":[],"tags":[{"name":"performance","slug":"performance","permalink":"http://pelssersconsultancy.github.io/tags/performance/"},{"name":"JRebel","slug":"JRebel","permalink":"http://pelssersconsultancy.github.io/tags/JRebel/"}]},{"title":"How to setup your own blog with Github Pages and Hexo","slug":"How-to-setup-your-own-blog","date":"2016-04-08T20:54:02.000Z","updated":"2016-04-25T11:29:49.000Z","comments":true,"path":"2016/04/08/How-to-setup-your-own-blog/","link":"","permalink":"http://pelssersconsultancy.github.io/2016/04/08/How-to-setup-your-own-blog/","excerpt":"","text":"1. Create a new github account Navigate to Github and click the Signup button. It is important to choose the same username as the one you want to use for [username].github.io Let’s assume you created a github account with username [johndoe] and email address [johndoe@gmail.com]. 2. Create a new repository Github pages explains how to setup your own blog site, so you can check it for reference. Log in on Github and click on the button ‘New Repository’. Now you should see a similar page like below with Owner [johndoe]. Fill in [johndoe.github.io] as repository name. 3. Setup you ssh key for githubGithub is a versioning system where each different version of any file belonging to your site will be saves and tracked. However, in order to be able to save your files from your computer to github, you need to do following steps: generate an ssh-key for the above created github account 123456789101112131415161718192021johndoe@laptop:~$ ssh-keygen -t rsa -b 4096 -C &quot;johndoe@gmail.com&quot;Generating public/private rsa key pair.Enter file in which to save the key (/Users/johndoe/.ssh/id_rsa): /Users/johndoe/.ssh/id_johndoe_rsaEnter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /Users/johndoe/.ssh/id_johndoe_rsa.Your public key has been saved in /Users/johndoe/.ssh/id_johndoe_rsa.pub.The key fingerprint is:SHA256:zFNrmBSufsH/URijFp/+rO9iKlRmj8XRjB1HasidLDE johndoe@gmail.comThe key&apos;s randomart image is:+---[RSA 4096]----+| . E=.oo|| . . .o*++ || o o.*.* || * ++=oB || . S+=++ . || . .*.... || ... . o || .. .o+ || ..oo== |+----[SHA256]-----+ Verify the following two files have been generated 123johndoe@laptop:~$ ls -la .ssh-rw------- 1 johndoe staff 3243 23 apr 16:39 id_johndoe_rsa-rw-r--r-- 1 johndoe staff 743 23 apr 16:39 id_johndoe_rsa.pub Copy the contents of the public key to the clipboard 1$ cat .ssh/id_johndoe_rsa.pub | pbcopy Go the the Github and click on Settings. Next click on ‘SSH and GPG keys’ in the left menu. Now click on the button ‘New SSH key’. Fill in a title like ‘SSH key of John Doe’ and paste the string that you copied intothe clipboard before’ which should look a bit like below. 1ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDddmyo4+UtzzUju6GwBGQu6NatFVmnDSZrykeqnXLSFT6JY1Ky57x62h80eFkmewauqnVZO09H8klkFMXDeuoweGeYFqowG+c5XwKsTIr4hC5Zxw+9CRa71xk7Xppdc4ROVZsbHVgb4F1kPkcNe4O9R+lyZqRNOb1clwngPfusyzH1WWl60fqhyU9n7WlqwdJ/ih9so8FgvmPYM27uKexOtcF7YWlXYnCLN1n8eRdGvTN01fRtON7zwxj3CyB+qD1JXfumneP0bcYSvBpVNZFDcRBclP7KluvEFYWDaZ8GH7xLJtrf34rIACE7LOFRWFYSTz5BI66794BGhastyczRcPZOzWa1ZQSsdB5iNLX8U32ZLqI71rA8tiViVGqpcVGkCRrl/QetdMEuebf67clXd4bp+AC8753UYfeIYAp0+uAT9zwnZWoBg3JW+RtwzeG7Hg8N3WnB6ULU0PqnA2fUtu0Fm4LpK9YcmRJ+izr6SlcZH87nK/rLcqv99vJSEaIcJz4+IBgZ8MKzfIZ5thritMD8xbKqMkGl1D6oG2ggR+WvnVgSlzdczHXreDy/KHWFDvTH/Vivta5EuOo7mRPkSAB2Ml809ev0+Ul6UvyJXYdTu5+ne5KzSHYWZV+C2lsT/aDT2gmsKNhlyPZOgwvn6IGinTKbO40QEjYozkPxFw== johndoe@gmail.com Create a new .ssh/config file or append to existing config file following host1234Host github.com-johndoe HostName github.com User git IdentityFile ~/.ssh/id_johndoe_rsa 4. Make sure you have NPM and NodeJs installed5. Make sure you have git installed6. Install Hexo12345$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install$ hexo server Browse to http://localhost:4000 and verify you see the initial empty blog. To shutdown the server again just press ctrl-c 7. Look for a theme you like to use and install it. I chose the icarus theme. To install it change directory into your newly created blog folder and clone the theme using git 1$ git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 8. Adapt the following in the file “blog/_config.yml”12345678910111213141516171819202122# Sitetitle: Pelssers Consultancyauthor: Robby Pelsserslanguage: en# URLurl: http://pelssersconsultancy.github.io/# Writingnew_post_name: :year-:month-:day-:title.md # File name of new postspost_asset_folder: true## Themes: https://hexo.io/themes/theme: icarus# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com-johndoe:johndoe/johndoe.github.io.git branch: master 9. Rename the file ‘blog/themes/icarus/_config.yml.example’ to ‘_config.yml’10. Adapt the file ‘blog/themes/icarus/_config.yml’ to your needs. E.g.:11. Create your first blog post12robbypelssers1@Macbook-Robby-Pelssers:~/Documents/pelssersconsultancy/blog$ hexo new &quot;My First Blog Post&quot;INFO Created: ~/Documents/pelssersconsultancy/blog/source/_posts/2016-04-23-My-First-Blog-Post.md As you can see a skeleton markdown file gets generated. The markdown for this first blog article looks like: 1234567891011121314151617181920212223242526272829303132333435# How to setup your own blog### 1. Create a new github account Navigate to [Github] and click the Signup button. It is important to choose the same username as the one you want to use for [**username**].github.io Let&apos;s assume you created a github account with username [**johndoe**] and email address [**johndoe@gmail.com**].### 2. Create a new repository [Github pages] explains how to setup your own blog site, so you can check it for reference. Log in on [Github] and click on the button &apos;New Repository&apos;. Now you should see a similar page like below with Owner [**johndoe**]. Fill in [**johndoe.github.io**] as repository name. &#123;% asset_img creating_repository.png Creating github repository %&#125; ### 3. Setup you ssh key for githubGithub is a versioning system where each different version of any file belonging to your site will be saves and tracked. .........[Github]: https://github.com[Github pages]: https://pages.github.com[pelssersconsultancy]: http://pelssersconsultancy.github.io[NodeJS]: https://nodejs.org[NPM]: https://www.npmjs.com/[git]: https://git-scm.com/download[Hexo]: https://hexo.io/[theme]: https://hexo.io/themes/[icarus]: https://github.com/ppoffice/hexo-theme-icarus[markdown]: https://guides.github.com/features/mastering-markdown/ 12.Generate the site1$ hexo generate 13. Deploy your site to github1$ hexo deploy","categories":[{"name":"Tutorials","slug":"Tutorials","permalink":"http://pelssersconsultancy.github.io/categories/Tutorials/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://pelssersconsultancy.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"http://pelssersconsultancy.github.io/tags/Github/"},{"name":"Markdown","slug":"Markdown","permalink":"http://pelssersconsultancy.github.io/tags/Markdown/"}]}]}